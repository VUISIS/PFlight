name: UbuntuCI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - uses: actions/setup-dotnet@v1
      with:
          dotnet-version: '3.1'
    
    - name: Install Java, P, and Coyote
      run: |
          sudo apt update && sudo apt install -y default-jre
          dotnet tool install --global P
          dotnet tool install --global Microsoft.Coyote.CLI --version 1.0.5
      working-directory: ${{github.workspace}}
      
    - name: Build MAVSDK
      run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../../build/MAVSDK/install -B../../build/MAVSDK -H.
          cmake --build ../../build/MAVSDK --target install
      working-directory: ${{github.workspace}}/Ext/MAVSDK
      
    - name: Build P
      run: |
          cmake -DCMAKE_INSTALL_PREFIX=../../../build/P/install -B../../../build/P -H.
          cmake --build ../../../build/P 
          mkdir -p ../../../build/FlightSystem
      working-directory: ${{github.workspace}}/Ext/P/Src
      
    - name: Generate C
      run: |
          pc -proj:FlightSystem.pproj
      working-directory: ${{github.workspace}}/C
      
    - name: Generate C#
      run: |
          pc -proj:FlightSystem.pproj
      working-directory: ${{github.workspace}}/CSharp
      
    - name: Build FlightSystem
      run: |
          cmake -DCMAKE_PREFIX_PATH="../MAVSDK/install/lib/cmake/MAVSDK;../MAVSDK/third_party/tinyxml2/tinyxml2/src/tinyxml2/cmake" ../../C
          make -j$(nproc --all)
      working-directory: ${{github.workspace}}/build/FlightSystem
      
    - name: Run Deterministic Tests
      run: coyote test ./POutput/netcoreapp3.1/FlightSystem.dll -m PImplementation.CheckDroneState.Execute -i 1000
      working-directory: ${{github.workspace}}/CSharp
      
    - name: Run Non-Deterministic Tests
      run: coyote test ./POutput/netcoreapp3.1/FlightSystem.dll -m PImplementation.FailDroneState.Execute -i 1000
      working-directory: ${{github.workspace}}/CSharp
